@page "/Formulario/{EscolhaInicial}/{Departamento}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using DevExpress.Blazor.RichEdit
@using DevExpress;
@using DevExpress.Blazor;
@using GOTinforcavado.Services
@using Microsoft.AspNetCore.Components.Forms
@using Shared.models
@using System.Security.Cryptography
@using System.Text


<Cabecalho imagem="true" />

<div class="Ticket">
    <EditForm Model="newTicket" OnValidSubmit="HandleSubmit" enctype="multipart/form-data" style="    display: flex
;
    align-items: center;">
        <DataAnnotationsValidator />
        <ValidationSummary />


        <div style="width: 100%; max-width: 536px;">
            <Headline EscolhaInicial="@newTicket.TipoTicket" Departamento="@newTicket.Departamento" />
        </div>

        <div class="form-group" style="width: 100%; max-width: 536px;">
            <label class="Text">Nome:<br /></label>
            <br />
            <InputText @bind-Value="newTicket.Nome"
                       class="@(formFoiSubmetido && string.IsNullOrWhiteSpace(newTicket.Nome) ? "CaixaTextoIncial input-error" : "CaixaTextoIncial")"
                       placeholder="Introduza o seu nome" />

        </div>

        <div class="form-group" style="width: 100%; max-width: 536px;">
            <label class="Text">Empresa:<br /></label>
            <br />
            <InputText @bind-Value="newTicket.Empresa"
                       class="@(formFoiSubmetido && string.IsNullOrWhiteSpace(newTicket.Empresa) ? "CaixaTextoIncial input-error" : "CaixaTextoIncial")"
                       placeholder="Introduza a sua empresa" />
        </div>
        <InputText @bind-Value="newTicket.Email"
                   class="@(formFoiSubmetido && (string.IsNullOrWhiteSpace(newTicket.Email) || !IsValidEmail(newTicket.Email)) ? "CaixaTextoIncial input-error" : "CaixaTextoIncial")"
                   placeholder="Introduza o seu email" />

        <ValidationMessage For="@(() => newTicket.Email)" />


        <div class="form-group" style="width: 100%; max-width: 536px;">
            <label class="Text">Telefone:<br /></label>
            <br />
            <InputText @bind-Value="newTicket.Telefone"
                       class="@(formFoiSubmetido && string.IsNullOrWhiteSpace(newTicket.Telefone) ? "CaixaTextoIncial input-error" : "CaixaTextoIncial")"
                       placeholder="Introduza o seu telefone" />
        </div>

        <div class="form-group" style="width: 100%; max-width: 536px;">
            <label class="Text">Assunto:<br /></label>
            <br />
            <InputText @bind-Value="newTicket.Assunto"
                       class="@(formFoiSubmetido && string.IsNullOrWhiteSpace(newTicket.Assunto) ? "CaixaTextoIncial input-error" : "CaixaTextoIncial")"
                       placeholder="Introduza o assunto" />
        </div>

        <div class="form-group" style="width: 100%; max-width: 536px;">
            <label class="Text">Mensagem:<br /></label>
            <br />
            <InputTextArea @bind-Value="newTicket.Mensagem"
                           class="@(formFoiSubmetido && string.IsNullOrWhiteSpace(newTicket.Mensagem) ? "CaixaTextoMaior input-error" : "CaixaTextoMaior")"
                           placeholder="Introduza a sua mensagem" />
        </div>


        <div class="form-group UploadZone" style="width: 100%;
    max-width: 536px;">
            <InputFile OnChange="HandleFileSelected" id="Ficheiro" multiple style="opacity: 0; width: 100%; height: 100%; cursor: pointer;" />

            <label for="Ficheiro" class="botaoUpload">
                <span class="material-symbols-outlined">content_paste</span>
                Colar Ficheiro
            </label>
        </div>

        @if (UploadedFiles.Any())
        {
            <div class="UploadedFiles">
                <ul>
                    @foreach (var file in UploadedFiles)
                    {
                        var iconPath = GetFileIcon(file.Name);
                        <li class="file-item">
                            <img src="@iconPath" alt="File Icon" class="file-icon" />
                            <div class="file-info" style="margin-left: 8px;">
                                <span>@file.Name</span>
                                <span class="file-size">@(file.Size / 1024) KB</span>
                            </div>
                            <span class="RemoveFile material-symbols-outlined" @onclick="() => RemoveFile(file)">close</span>
                        </li>
                    }
                </ul>
            </div>
        }

        @if (PastedFiles.Any())
        {
            <div class="UploadedFiles">
                <ul>
                    @foreach (var file in PastedFiles)
                    {
                        <li class="file-item">
                            <img src="@GetFileIcon(file.Name)" alt="File Icon" class="file-icon" />
                            <div class="file-info">
                                <span>@file.Name</span>
                                <span class="file-size">@(file.Data.Length / 1024) KB</span>
                            </div>
                            <span class="RemoveFile material-symbols-outlined" @onclick="() => RemovePastedFile(file)">close</span>
                        </li>
                    }
                </ul>
            </div>
        }

        <div class="form-group" style="display: flex; flex-direction: column; gap: 5px;">
            <div style="display: flex; align-items: center;">
                <div class="@GetCheckmarkClass(isCheck1Checked)" @onclick="ToggleCheck1"></div>
                <label class="TextoCheck1">Autorizo a Inforcávado a usar meus dados para contacto.</label>
            </div>
            <div style="display: flex; align-items: center;">
                <div class="@GetCheckmarkClass(isCheck2Checked)" @onclick="ToggleCheck2"></div>
                <label class="TextoCheck2">Lembrar-me para a próxima vez</label>
            </div>
        </div>

        <button type="submit" class="botaoEnviarTicket">Criar Ticket</button>
    </EditForm>
</div>

<Rodape />

<Cookies />
@code {

    [Parameter]
    public string EscolhaInicial { get; set; } = string.Empty;

    [Parameter]
    public string Departamento { get; set; } = string.Empty;

    private Ticket newTicket = new Ticket();
    private List<IBrowserFile> UploadedFiles = new();
    private List<(string Name, byte[] Data, string ContentType)> PastedFiles = new();

    private bool isCheck1Checked = false;
    private bool isCheck2Checked = false;

    private bool formFoiSubmetido = false;




    protected override void OnParametersSet()
    {
        newTicket.TipoTicket = EscolhaInicial;
        newTicket.Departamento = Departamento;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("registerPasteHandler", DotNetObjectReference.Create(this));
        }
    }


    private bool IsValidEmail(string email)
    {
        var emailRegex = new System.Text.RegularExpressions.Regex(@"^[^@\s]+@[^@\s]+\.[^@\s]+$");
        return emailRegex.IsMatch(email);
    }


    private async Task HandleSubmit()
    {
        formFoiSubmetido = true; // <-- Ativa a validação visual

        if (string.IsNullOrWhiteSpace(newTicket.Nome) ||
            string.IsNullOrWhiteSpace(newTicket.Empresa) ||
            string.IsNullOrWhiteSpace(newTicket.Email) ||
            string.IsNullOrWhiteSpace(newTicket.Telefone) ||
            string.IsNullOrWhiteSpace(newTicket.Assunto) ||
            string.IsNullOrWhiteSpace(newTicket.Mensagem))
        {
            // Campos obrigatórios estão vazios — bloqueia envio
            return;
        }

        newTicket.codigo = GenerateFixedRandomId(newTicket.Nome ?? "");

        using var content = new MultipartFormDataContent();
        content.Add(new StringContent(newTicket.Nome ?? ""), "Nome");
        content.Add(new StringContent(newTicket.Empresa ?? ""), "Empresa");
        content.Add(new StringContent(newTicket.Email ?? ""), "Email");
        content.Add(new StringContent(newTicket.Telefone ?? ""), "Telefone");
        content.Add(new StringContent(newTicket.Assunto ?? ""), "Assunto");
        content.Add(new StringContent(newTicket.Mensagem ?? ""), "Mensagem");
        content.Add(new StringContent(newTicket.TipoTicket ?? ""), "TipoTicket");
        content.Add(new StringContent(newTicket.Departamento ?? ""), "Departamento");

        foreach (var file in UploadedFiles)
        {
            var stream = file.OpenReadStream();
            var streamContent = new StreamContent(stream);
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            content.Add(streamContent, "ficheiros", file.Name);
        }

        foreach (var file in PastedFiles)
        {
            var stream = new MemoryStream(file.Data);
            var streamContent = new StreamContent(stream);
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            content.Add(streamContent, "ficheiros", file.Name);
        }

        var url = $"/SucessoTicket/{newTicket.TipoTicket}/{newTicket.Departamento}" +
             $"?nome={newTicket.Nome}&empresa={newTicket.Empresa}";

        NavigationManager.NavigateTo(url);
        var response = await HttpClient.PostAsync("https://localhost:7111/api/Ticket", content);
    }

    private void ToggleCheck1() => isCheck1Checked = !isCheck1Checked;
    private void ToggleCheck2() => isCheck2Checked = !isCheck2Checked;
    private string GetCheckmarkClass(bool isChecked) => isChecked ? "Checkmark checked" : "Checkmark";

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        UploadedFiles = e.GetMultipleFiles().ToList();
    }

    private void RemoveFile(IBrowserFile file) => UploadedFiles.Remove(file);
    private void RemovePastedFile((string Name, byte[] Data, string ContentType) file) => PastedFiles.Remove(file);

    private string GetFileIcon(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLower();
        return extension switch
        {
            ".txt" or ".doc" or ".docx" => "imagens/i-docs-text.svg",
            ".xls" or ".xlsx" => "imagens/i-excel.svg",
            ".png" or ".jpg" or ".jpeg" or ".gif" or ".bmp" => "imagens/i-preview-artdocs.svg",
            _ => "imagens/i-other.svg"
        };
    }

    private static string GenerateFixedRandomId(string input)
    {
        using (var sha256 = SHA256.Create())
        {
            byte[] hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(input + DateTime.UtcNow.Ticks));
            return BitConverter.ToString(hashBytes.Take(8).ToArray()).Replace("-", "").ToLower();
        }
    }

    [JSInvokable]
    public void AddPastedFile(string name, string contentType, string base64Data)
    {
        byte[] data = Convert.FromBase64String(base64Data);
        PastedFiles.Add((name, data, contentType));
        InvokeAsync(StateHasChanged);
    }
}

<script>
    window.registerPasteHandler = (dotNetRef) => {
        document.addEventListener("paste", function (event) {
            let dropZone = document.getElementById("drop-zone");

            let items = event.clipboardData.items;
            for (let i = 0; i < items.length; i++) {
                let item = items[i];
                if (item.kind === 'file') {
                    let file = item.getAsFile();
                    let reader = new FileReader();

                    reader.onload = function (evt) {
                        let base64Data = evt.target.result.split(',')[1];
                        dotNetRef.invokeMethodAsync("AddPastedFile", file.name, file.type, base64Data);
                    };

                    reader.readAsDataURL(file);

                    if (dropZone) {
                        dropZone.classList.add("UploadZone-hover");
                        dropZone.focus();

                        setTimeout(() => dropZone.classList.remove("UploadZone-hover"), 1500);
                    }
                }
            }
        });
    };

</script>



<style>

    .input-error {
        border: 2px solid #e53935; 
        outline: none;
        box-shadow: none;
    }


    .Text {
        font-family: "Sora", sans-serif;
        font-size: 14px;
        height: 18px;
        color: #12444A;
        margin-bottom: 5px;
    }

    .CaixaTextoIncial {
        width: 100%;
        height: 48px;
        border: 1px solid #D1D8D8;
        border-radius: 8px;
        font-family: "Sora", sans-serif;
        font-size: 12px;
        margin-bottom: 15px;
        padding-left: 10px;
    }

    .CaixaTextoMaior {
        width: 100%;
        height: 96px;
        border: 1px solid #D1D8D8;
        border-radius: 8px;
        font-family: "Sora", sans-serif;
        font-size: 12px;
        margin-bottom: 15px;
        padding-left: 10px;
        padding-top: 10px;
    }


    .Ticket {
        background: #fff;
        display: flex;
        flex-direction: column;
        padding: 0 140px 60px 140px;
    }


    .botaoEnviarTicket {
        display: flex;
        justify-content: center;
        align-items: center;
        align-self: center;
        width: 112px;
        height: 40px;
        margin-top: 30px;
        font: normal normal normal 14px/18px Sora;
        letter-spacing: 0px;
        color: #F9F9F9;
        background-color: #1B7C87;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }



    .UploadZone {
        width: 100%;
        height: 130px;
        border: 1px dashed #D1D8D8;
        border-radius: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
    }


        .UploadZone input[type="file"] {
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .UploadZone:hover {
            background: #E8F2F3;
            border: 2px dashed #1B7C87;
            transition: background 0.3s, border-color 0.3s;
        }

    .UploadZone-hover {
        background: #E8F2F3;
        border: 2px dashed #1B7C87;
        transition: background 0.3s, border-color 0.3s;
    }

    .UploadZone:focus {
        border: 2px dashed var(--primary-500-r-);
        background: #B9D6DA7F 0% 0% no-repeat padding-box;
        border-radius: 8px;
        opacity: 1;
    }



    .botaoUpload {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        justify-content: center;
        align-items: center;
        width: 154px;
        height: 40px;
        font: normal normal normal 14px / 18px Sora;
        letter-spacing: 0px;
        color: #758A8A;
        text-align: center;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 4px;
        cursor: pointer;
    }



    form {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }



    .TextoDeInformacao {
        margin-top: 8px;
        width: 536px;
        height: 27px;
        letter-spacing: 0px;
        color: #758A8A;
        opacity: 1;
        font-family: "Poppins", sans-serif;
        font-size: 10px;
    }

    .TextoCheck1 {
        width: 288px;
        height: 13px;
        font-family: "Sora";
        font-size: 10px;
        text-align: left;
        letter-spacing: 0px;
        color: #414D4D;
        opacity: 1;
        margin-top: 12px;
        margin-left: 8px;
    }


    .TextoCheck2 {
        width: 159px;
        height: 13px;
        text-align: left;
        font-family: "Sora";
        font-size: 10px;
        letter-spacing: 0px;
        color: #414D4D;
        opacity: 1;
        margin-top: 12px;
        margin-left: 8px;
    }

    .Checkmark {
        width: 24px;
        height: 24px;
        opacity: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        border: 2px solid #1B7C87;
        border-radius: 4px;
        background-color: #fff;
        cursor: pointer;
        margin-bottom: 8px;
        margin-top: 20px;
    }

        .Checkmark::after {
            content: "✔";
            font-size: 16px;
            color: #1B7C87;
            display: none;
        }

        .Checkmark.checked::after {
            display: block;
        }




    .UploadedFiles {
        margin-top: 10px;
        width: 536px;
    }

        .UploadedFiles ul {
            list-style: none;
            padding: 0;
        }

        .UploadedFiles li {
            display: flex;
            align-items: center;
            justify-content: flex-start;
            font-family: "Sora", sans-serif;
            font-size: 14px;
            color: #414D4D;
            padding: 5px;
            border-bottom: 1px solid #ccc;
        }



    .RemoveFile {
        color: #ccc;
        cursor: pointer;
        font-size: 24px;
        margin-left: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .RemoveFile:hover {
            color: #a0a0a0;
        }


    @@media(max-width: 1280px) {
        .Ticket {
            background: #fff;
            display: flex;
            flex-direction: column;
            padding: 0 96px 60px 96px;
        }
    }

    @@media(max-width: 1024px) {
        .Ticket {
            background: #fff;
            display: flex;
            flex-direction: column;
            padding: 0 60px 60px 60px;
        }
    }


    @@media(max-width: 768px) {

        .Ticket {
            background: #fff;
            display: flex;
            flex-direction: column;
            padding: 0 48px 60px 48px;
        }
    }

    @@media(max-width: 640px) {

        .Ticket {
            background: #fff;
            display: flex;
            flex-direction: column;
            padding: 0 24px 60px 24px;
        }
    }
</style>
