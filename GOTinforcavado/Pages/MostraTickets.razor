@page "/MostraTikcets"
@inject HttpClient HttpClient
@using GOTinforcavado.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@using Shared.models
@inject TicketService TicketService
@inject UtilizadorService UtilizadorService
@using MudBlazor
@using System.Security.Cryptography
@using System.Text
@using System.Globalization
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@using DevExpress.Blazor
@using DevExpress.Blazor.Grid


@* <Cabecalho imagem="false" botoes="Cabecalho.Botoes.Novo" />
 *@
  
<div class="mostratickets">
    <div class="titulo">Tickets</div>
    <div class="Buttons">
        <MudPopover Target="departamentoButton" Open="@isDepartamentoPopoverOpen">
            <MudPaper Class="popover-container">
                <MudButton Variant="Variant.Text" Color="Color.Primary" Style="color: #19235699;" OnClick="() => FiltrarPorDepartamento(null)">
                    Todos
                </MudButton>
                @foreach (var departamento in Departamentos)
                {
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Style="color: #19235699;" OnClick="() => FiltrarPorDepartamento(departamento)">
                        @departamento
                    </MudButton>
                }
            </MudPaper>
        </MudPopover>

        <MudPopover Target="Topico" Open="@isTopicoPopoverOpen">
            <MudPaper Class="popover-container">
                <MudButton Variant="Variant.Text" Color="Color.Primary" Style="color: #19235699;" OnClick="() => FiltrarPorTopico(null)">
                    Todos
                </MudButton>
                @foreach (var escolhaInicial in Topicos)
                {
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Style="color: #19235699;" OnClick="() => FiltrarPorTopico(escolhaInicial)">
                        @escolhaInicial
                    </MudButton>
                }
            </MudPaper>
        </MudPopover>

        <button id="departamentoButton" class="Departamento" @onclick="ToggleDepartamentoPopover">
            <span class="material-symbols-outlined">apps</span>
            Departamento
            <span class="material-symbols-outlined">arrow_drop_down</span>
        </button>

        <button id="Topico" class="Topico" @onclick="ToggleTopicoPopover">
            <span class="material-symbols-outlined">help</span>
            Tópico
            <span class="material-symbols-outlined">arrow_drop_down</span>
        </button>

        <div class="ButtonsRight">
            <button class="button @(visualizacaoAtual == Visualizacao.Tabela ? "ButtonPressed" : "")"
                    @onclick="() => MudarVisualizacao(Visualizacao.Tabela)">
                <span class="material-symbols-outlined">table</span>
            </button>
            <button class="button @(visualizacaoAtual == Visualizacao.Lista ? "ButtonPressed" : "")"
                    @onclick="() => MudarVisualizacao(Visualizacao.Lista)">
                <span class="material-symbols-outlined">format_list_bulleted</span>
            </button>
            <button class="button @(visualizacaoAtual == Visualizacao.Cards ? "ButtonPressed" : "")"
                    @onclick="() => MudarVisualizacao(Visualizacao.Cards)">
                <span class="material-symbols-outlined">dashboard</span>
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-message">Aguarde, a carregar tickets...</div>
    }
    else
    {
        @if (visualizacaoAtual == Visualizacao.Tabela)
        {
            <MudTable Items="@GridData" Hover="true" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Assunto</MudTh>
                    <MudTh>Data de Criação</MudTh>
                    <MudTh>Departamento</MudTh>
                    <MudTh>Tópico</MudTh>
                    <MudTh>Estado</MudTh>
                    <MudTh>Ações</MudTh>
                </HeaderContent>
                <RowTemplate Context="ticket">
                    <MudTd DataLabel="ID">@ticket.codigo</MudTd>
                    <MudTd DataLabel="Assunto">@ticket.Assunto</MudTd>
                    <MudTd DataLabel="Data de Criação">@ticket.Data.ToString("dd/MM/yyyy")</MudTd>
                    <MudTd DataLabel="Departamento">@ticket.Departamento</MudTd>
                    <MudTd DataLabel="Tópico">@ticket.TipoTicket</MudTd>
                    <MudTd DataLabel="Estado">
                        <MudChip T="string" Class="@ObterClasseEstado(ticket.Estadodoticket)">
                            @ticket.Estadodoticket
                        </MudChip>
                    </MudTd>
                    <MudTd>
                        <MudIcon Icon="@Icons.Material.Filled.MailOutline" Style="color: #758A8A;" />
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 20, 50 }" />
                </PagerContent>
            </MudTable>
        }
        else if (visualizacaoAtual == Visualizacao.Lista)
        {
            <MudList T="string" Class="no-padding">
                @foreach (var ticket in GridData)
                {
                    <MudListItem T="string" Class="no-padding">
                        <MudGrid Class="mud-grid-spacing-xs-0">
                            <MudItem xs="12" class="tittleline" style="padding-top:8px">
                                #@ticket.codigo
                            </MudItem>
                            <MudItem xs="12" class="mudgrid" style="padding-top:8px; display:flex; justify-content: space-between;">
                                @ticket.Assunto
                                <div style="display:flex; flex-direction:row; gap:8px">
                                    <div class="noscards">
                                        @ticket.Departamento
                                    </div>
                                    <div class="noscards">
                                        @ticket.TipoTicket
                                    </div>
                                    <span class="estado-badge @ObterClasseEstado(ticket.Estadodoticket)">
                                        @ticket.Estadodoticket
                                    </span>
                                    <span class="material-symbols-outlined" style="color: #758A8A">
                                        outgoing_mail
                                    </span>
                                </div>
                            </MudItem>
                            <MudItem xs="12" class="datacard" style="padding-top:8px; padding-bottom:8px">
                                @ticket.Data.ToString("dd/MM/yyyy")
                            </MudItem>
                        </MudGrid>
                        <hr class="linhaestilo" />
                    </MudListItem>
                }
            </MudList>
        }
        else if (visualizacaoAtual == Visualizacao.Cards)
        {
            <div class="cards-container">
                @foreach (var ticket in GridData)
                {
                    <MudCard Class="ticket-card">
                        <MudCardContent>
                            <div class="cardtop">
                                <span class="estado-badge @ObterClasseEstado(ticket.Estadodoticket)">
                                    @ticket.Estadodoticket
                                </span>
                                <span class="material-symbols-outlined" style="color: #758A8A">
                                    outgoing_mail
                                </span>
                            </div>
                            <div>@ticket.codigo</div>
                            <div class="cardtext">@ticket.Mensagem</div>
                            <div class="datacard">@ticket.Data.ToString("dd/MM/yyyy")</div>
                            <div class="cardbottom">
                                <div class="noscards">
                                    @ticket.Departamento
                                </div>
                                <div class="noscards">
                                    @ticket.TipoTicket
                                </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                }
            </div>
        }
    }
</div>

<Navbar SelectedItemId="3" />
@inject IJSRuntime JSRuntime

@code {
    private List<Ticket> GridData = new();
    private List<Ticket> TodosTickets = new();
    private List<string> Departamentos = new();
    private List<string> Topicos = new();
    private bool isLoading = true;
    private bool isDepartamentoPopoverOpen = false;
    private bool isTopicoPopoverOpen = false;
    private Visualizacao visualizacaoAtual = Visualizacao.Tabela;
    private string userEmail;

    private void MudarVisualizacao(Visualizacao novaVisualizacao)
    {
        visualizacaoAtual = novaVisualizacao;
    }

    private enum Visualizacao
    {
        Tabela,
        Lista,
        Cards
    }

    protected override async Task OnInitializedAsync()
    {
        // Obtém o e-mail do utilizador a partir do sessionStorage
        userEmail = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userEmail");

        // Carrega todos os tickets
        TodosTickets = await TicketService.GetTicketsAsync();

        // Filtra os tickets do utilizador
        TodosTickets = TodosTickets.Where(t => t.Email == userEmail).ToList();
        GridData = new List<Ticket>(TodosTickets);

        Departamentos = TodosTickets
            .Select(t => t.Departamento ?? "")
            .Distinct()
            .ToList();

        Topicos = TodosTickets
            .Select(t => t.TipoTicket ?? "")
            .Distinct()
            .ToList();

        isLoading = false;
    }

    private void FiltrarPorDepartamento(string departamento)
    {
        GridData = departamento == null
            ? new List<Ticket>(TodosTickets)
            : TodosTickets.Where(t => t.Departamento == departamento).ToList();

        isDepartamentoPopoverOpen = false;
    }

    private void FiltrarPorTopico(string topico)
    {
        GridData = string.IsNullOrEmpty(topico)
            ? new List<Ticket>(TodosTickets)
            : TodosTickets.Where(t => t.TipoTicket == topico).ToList();

        isTopicoPopoverOpen = false;
    }

    private void ToggleDepartamentoPopover()
    {
        isDepartamentoPopoverOpen = !isDepartamentoPopoverOpen;
    }

    private void ToggleTopicoPopover()
    {
        isTopicoPopoverOpen = !isTopicoPopoverOpen;
    }

    private string ObterClasseEstado(EstadoTicket estado)
    {
        return estado switch
        {
            EstadoTicket.PorIniciar => "estado-por-iniciar",
            EstadoTicket.EmCurso => "estado-em-curso",
            EstadoTicket.Resolvido => "estado-resolvido",
            EstadoTicket.Pendente => "estado-pendente",
            EstadoTicket.EmAnalise => "estado-em-analise",
            EstadoTicket.Fechado => "estado-fechado",
            _ => ""
        };
    }
}

<style>

    .mostratickets {
        background-color: #FFFF;
        padding: 86px 96px;
        margin-left: 231px;
    }

    .titulo {
        width: 92px;
        color: #12444A;
        font-family: "Poppins";
        font-size: 24px;
        font-weight: 600;
        padding-bottom: 16px;
    }

    .Departamento, .Topico {
        background-color: white;
        width: 156px;
        display: flex;
        flex-direction: row;
        color: #19235699;
        font-family: "Poppins";
        font-size: 13px;
        font-weight: 500;
        border: 1px solid #22658933;
        border-radius: 8px;
        margin-right: 8px;
    }

    .Buttons {
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    .ButtonsRight {
        display: flex;
        flex-direction: row;
        color: #19235699;
        margin-left: auto;
    }

    .button {
        background-color: transparent;
        color: #19235699;
        border: none;
        cursor: pointer;
        padding: 10px;
        border-radius: 5px;
        transition: all 0.3s ease;
    }

        .button:hover {
            background-color: #19235633;
        }

    .ButtonPressed {
        background-color: #E8F2F3;
        color: #1B7C87;
        transform: scale(0.95);
        font-weight: bold;
    }



    .ticket-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .ticket-table th, .ticket-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        .ticket-table th {
            background-color: #f2f2f2;
        }

    .estado-badge {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 14px;
        font-weight: 500;
        min-width: 100px;
        text-align: center;
    }


    .estado-por-iniciar {
        background-color: #1923560D;
        color: #192356;
    }

    .estado-em-curso {
        background-color: #8BB7311A;
        color: #8BB731;
    }

    .estado-concluido {
        background-color: #33A3631A;
        color: #33A363;
    }

    .estado-publicado {
        background-color: #5D22891A;
        color: #5D2289;
    }

    .estado-arquivado {
        background-color: #192356;
        color: white;
    }

    .estado-em-espera {
        background-color: #192356;
        color: white;
    }


    .ticket-table th {
        background-color: #1923560D;
        color: #19235699;
    }

    .ticket-table th, .ticket-table td {
        border: 1px solid #2265891A;
        padding: 8px;
        text-align: left;
    }

    .loading-message {
        text-align: center;
        font-size: 18px;
        font-weight: bold;
        color: #12444A;
        padding: 20px;
    }




    .tittleline {
        width: 45px;
        text-align: left;
        font-family: "Poppins";
        font-weight: 500;
        font-size: 16px;
        letter-spacing: 0px;
        color: #192356;
        opacity: 1;
        padding-top: 8px;
        /* padding-left: 8px; */
        padding-bottom: 8px;
    }

    .mudgrid {
        padding-left: 24px;
    }

    .ticket-card {
        width: calc(25% - 10px);
        min-width: 266px;
        height: 178px;
        /*   padding: 10px; */
        box-sizing: border-box;
    }

    .cards-container {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
    }

    .cardtop {
        display: flex;
        justify-content: space-between;
        padding-bottom: 6px;
        padding-top: 8px;
    }

    .cardbottom {
        display: flex;
        gap: 8px;
        padding-top: 16px;
    }

    .cardtext {
        padding-top: 8px;
        color: #19235699;
        font-family: "Poppins";
        font-size: 12px;
        font-weight: 500;
        width: 250px;
    }

    .datacard {
        padding-top: 8px;
        color: #19235699;
        font-family: "Sora";
        font-size: 14px;
        font-weight: 500;
        width: 52px;
    }

    .noscards {
        border: 1px solid #B9D6DA;
        color: #192356;
        border-radius: 8px;
    }

    .mud-card-content {
        flex-grow: 1;
        padding: 0 16px;
    }

    .linhaestilo {
        width: 1388px;
        border: 1px solid #226589;
        opacity: 0.2;
    }

    .mud-list-item-gutters {
        padding-left: 16px;
        /* padding-right: 16px; */
    }

    
      @@media(max-width: 1280px){
        .mostratickets {
            background-color: #FFFF;
            padding: 86px 96px;
        }
    }

    @@media(max-width: 1024px) {
        .mostratickets {
            background-color: #FFFF;
            padding: 86px 40px;
        }
    }

  
</style>