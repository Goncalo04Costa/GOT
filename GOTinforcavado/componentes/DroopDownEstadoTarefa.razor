@using GOTinforcavado.Services
@using Shared.models
@inject TicketService TicketService

<style>
    .ddAtribuicao {
        width: 320px;
        border-radius: 8px;
        background: #ffff;
        opacity: 1;
        box-shadow: 0px 3px 6px #00000029;
    }

    .InputWrapper {
        width: 100%;
        height: 40px;
        margin: 0 auto;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .caixaDETexto {
        width: 100%;
        height: 40px;
        background: #FFFFFF;
        border: 1px solid #D1D8D8;
        border-radius: 8px;
        opacity: 1;
        padding: 16px 0 16px 16px;
    }
</style>

<div class="ddAtribuicao">
    <div class="InputWrapper">
        <input type="text" class="caixaDETexto" placeholder="Pesquise por estado..." @bind="searchQuery" @oninput="OnSearchInput">
    </div>

    <ul>
        @foreach (var estado in estadosFiltrados)
        {
            <li>@estado</li>
        }
    </ul>
</div>

@code {
    private string searchQuery { get; set; } = string.Empty;
    private List<Ticket> tickets = new();
    private List<EstadoTarefa> estadosFiltrados = new();

    protected override async Task OnInitializedAsync()
    {
        tickets = await TicketService.GetTicketsAsync();
        estadosFiltrados = Enum.GetValues(typeof(EstadoTarefa)).Cast<EstadoTarefa>().ToList();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString().ToLower();

        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            estadosFiltrados = Enum.GetValues(typeof(EstadoTarefa)).Cast<EstadoTarefa>().ToList();
        }
        else
        {
            estadosFiltrados = Enum.GetValues(typeof(EstadoTarefa))
                                  .Cast<EstadoTarefa>()
                                  .Where(e => e.ToString().ToLower().Contains(searchQuery))
                                  .ToList();
        }
    }
}
