@inject HttpClient HttpClient
@using GOTinforcavado.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@using Shared.models
@inject TicketService TicketService
@inject UtilizadorService UtilizadorService
@inject ComentarioService ComentarioService
@inject EventoService EventoService
@using System.Security.Cryptography
@using System.Text
@using System.Globalization
@using System.Text.RegularExpressions
@using MudBlazor.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .AcompanhaTicket {
        height: 1270px;
        background-color: white;
    }

    .TituloAcompnha {
        padding-top: 20px;
        width: 476px;
        height: 46px;
        color: #12444A;
        opacity: 1;
        font-family: "Poppins";
        font-size: 32px;
        font-weight: 700;
        margin-left: 324px;
        white-space: nowrap;
        padding-bottom: 8px;
    }

    .TextoInformativoAcompanhamento {
        width: 717px;
        height: 46px;
        letter-spacing: 0px;
        color: #414D4D;
        opacity: 1;
        margin-left: 324px;
        font-family: "Sora";
        font-size: 18px;
    }

    .InputWrapper {
        width: 720px;
        height: 48px;
        margin-left: 324px;
    }

    .caixaDETexto {
        width: 720px;
        height: 48px;
        background: #FFFFFF;
        border: 1px solid #D1D8D8;
        border-radius: 8px;
        opacity: 1;
    }

    .BotaoSubscrever {
        top: 4px;
        left: calc(100% - 113px + 4px);
        bottom: 4px;
        width: 113px;
        height: 40px;
        background: #1B7C87;
        border: none;
        border-radius: 8px;
        color: #fff;
        cursor: pointer;
        opacity: 1;
    }

    .cards-container {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-left: 330px;
        margin-top: 28px;
    }

    .VerEstado,
    .VerDepartamento1,
    .VerDepartamento2,
    .VerHorasss {
        width: 80px;
        height: 24px;
        font-family: "Poppins";
        font-size: 13px;
        font-weight: 500;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .VerEstado {
        background-color: #5D22891A;
    }

    .VerDepartamento1,
    .VerDepartamento2,
    .VerHorasss {
        border: 1px solid #B9D6DA;
        color: #192356;
    }

    .ticket-info {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-left: 330px;
        padding-top: 16px;
    }

    .ticketcode, .ticketassunto {
        letter-spacing: 0px;
        color: #0D3439;
        opacity: 1;
        font-family: "Poppins";
        font-size: 24px;
        font-weight: 500;
    }

    .ticketMensagem {
        margin-left: 330px;
        width: 628px;
        height: 35px;
        font-family: "Sora";
        font-size: 13px;
        letter-spacing: 0px;
        color: #414D4D;
        opacity: 1;
        margin-top: 8px;
        white-space: nowrap;
    }

        .ticketMensagem:last-of-type {
            width: 58px;
            height: 14px;
            font-family: "Sora";
            font-size: 11px;
            letter-spacing: 0px;
            color: #758A8A;
            opacity: 1;
            margin-top: 8px;
        }

    .ticket-detalhes {
        display: flex;
        justify-content: space-between;
        width: 720px;
        margin-left: 330px;
        margin-top: 8px;
        font-family: "Sora";
        font-size: 13px;
        color: #414D4D;
        opacity: 1;
        margin-bottom: 8px;
    }

    .caixaComentarios {
        background: #E8F2F380;
        width: 730px;
        margin-left: 330px;
        padding: 16px;
    }

    .semmaisdados {
        width: 124px;
        height: 13px;
        letter-spacing: 0px;
        color: #758A8A;
        opacity: 1;
        font-family: "Sora";
        font-size: 10px;
        padding-bottom: 24px;
        margin-left: 290px;
        margin-right: 290px;
    }

    .criouticket {
        width: 688px;
        height: 32px;
        display: inline-flex;
        align-items: center;
    }

    .point {
        width: 5px;
        height: 19px;
        text-align: left;
        font-family: "Poppins";
        letter-spacing: 0px;
        color: #192356;
        opacity: 1;
        margin-left: 14px;
    }

    .username {
        margin-top: 10px;
        width: auto;
        height: 19px;
        padding-left: 6px;
        letter-spacing: 0px;
        color: #226589;
        opacity: 1;
        font-size: 10px;
        font-family: "Poppins";
    }

    .textocriouticket {
        margin-top: 10px;
        width: auto;
        height: 19px;
        padding-left: 0px;
        letter-spacing: 0px;
        color: #192356;
        opacity: 1;
        font-size: 10px;
        font-family: "Poppins";
        margin-left: 4px;
        white-space: nowrap;
    }

    .horariocriacaoticket {
        margin-top: 6px;
        width: auto;
        color: #19235699;
        font-size: 10px;
        font-family: "Sora";
        margin-left: 430px;
    }

    .comentario-form {
        margin-top: 24px;
        padding-top: 16px;
        border-top: 1px solid #D1D8D8;
        margin-left: 330px;
        width: 720px;
    }

        .comentario-form h4 {
            color: #12444A;
        }

        .comentario-form textarea {
            width: 100%;
            min-height: 80px;
            border-radius: 8px;
            border: 1px solid #D1D8D8;
            padding: 8px;
            font-family: "Sora";
        }

        .comentario-form .switch-container {
            display: flex;
            align-items: center;
            justify-content: start; 
            min-width: 120px; 
            gap: 8px; 
        }


            .comentario-form .switch-container span {
                margin-left: 8px;
                font-family: "Sora";
            }

        .comentario-form button {
            margin-top: 12px;
            padding: 8px 16px;
            background-color: #1B7C87;
            color: #fff;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }

    .umcomentario {
        display: flex;
        flex-direction: column;
        gap: 1px;
        width: 730px;
        margin-top: 16px;
        padding: 8px;
        margin-left: -16px;
        background-color: #19235608;
    }

    .nomecomentario {
        width: 119px;
        font-family: "Poppins";
        color: #192356;
        font-size: 12px;
        text-align: left;
        padding-bottom: 2px;
    }

    .emailcomentario {
        width: 106px;
        font-family: "Poppins";
        color: #192356;
        font-size: 10px;
        text-align: left;
        padding-bottom: 2px;
    }

    .textocomentario {
        font-family: "Poppins";
        color: #192356;
        font-size: 10px;
        text-align: left;
        flex-grow: 1;
        padding-bottom: 2px;
    }

    .hora-comentario {
        margin-left: 15px;
        font-size: 10px;
        color: #758A8A;
    }

    /* Estilo para os eventos */
    .umevento {
        padding: 8px;
        border: 1px solid #192356;
        border-radius: 8px;
        margin-top: 16px;
    }

    .nomeevento {
        font-family: "Poppins";
        color: #192356;
        font-size: 12px;
        margin-bottom: 4px;
    }

    .hora-evento {
        margin-left: 15px;
        font-size: 10px;
        color: #758A8A;
    }

    .descricaoevento {
        font-family: "Poppins";
        color: #192356;
        font-size: 10px;
    }


    .dataseparador {
        width: 109px;
        height: 16px;
        text-align: left;
        font-family: "Poppins";
        font-size: 11px;
        letter-spacing: 0px;
        color: #226589;
        padding-top: 5px;
        text-transform: uppercase;
        opacity: 1;
    }

    .dividedatas {
  left: 330px;
  width: 726px;
  height: 0px; 
  border: 1px solid #226589;
  opacity: 0.2;
}


</style>

<header class="AcompanhaTicket">
    <p class="TituloAcompnha">
        Acompanhamento de tickets
    </p>
    <p class="TextoInformativoAcompanhamento">
        O número do seu ticket permite-nos fornecer-lhe informações atualizadas sobre o estado do pedido que efetuou.
    </p>

    <div class="InputWrapper">
        <input @bind="codigo" type="text" class="caixaDETexto" placeholder="Introduza o ID do ticket aqui" />
        <button class="BotaoSubscrever" @onclick="ProcurarTicket">Procurar</button>
    </div>

    @if (ticketEncontrado != null)
    {
       
        <div class="cards-container">
            <div class="VerEstado">@ticketEncontrado.EstadoTarefa</div>
            <div class="VerDepartamento1">@ticketEncontrado.EscolhaInicial</div>
            <div class="VerDepartamento2">@ticketEncontrado.Departamento</div>
            <div class="VerHorasss">@ticketEncontrado.Data.ToString("HH:mm")</div>

            <MudTooltip Class="custom-tooltip" Text="Sujeito a alterações até que o ticket esteja fechado" Placement="Placement.Bottom" Arrow="true" Style="background: #0E384E">
                <span class="material-symbols-outlined">info</span>
            </MudTooltip>
        </div>

        <div class="ticket-info">
            <div class="ticketcode">#@ticketEncontrado.Id</div>
            <div class="ticketassunto">@ticketEncontrado.Assunto</div>
        </div>

        <div class="ticketMensagem">@ticketEncontrado.Mensagem</div>
        <div class="ticketMensagem">@ticketEncontrado.Data.ToString("dd/MM/yyyy")</div>



        <div class="ticket-detalhes">
            <span class="ticket-info-item"><strong>Nome<br /></strong> @ticketEncontrado.Nome</span>
            <span class="ticket-info-item"><strong>Email<br /></strong> @ticketEncontrado.Email</span>
            <span class="ticket-info-item"><strong>Empresa<br /></strong> @ticketEncontrado.Empresa</span>
            <span class="ticket-info-item"><strong>Telefone<br /></strong> @ticketEncontrado.Telefone</span>
        </div>

        <div class="caixaComentarios">
            @if (registrosAtividades != null && registrosAtividades.Any())
            {
               
                var registosPorDia = registrosAtividades.GroupBy(r => r.Data.Date);
               

                @foreach (var grupo in registosPorDia)
                {
                    <div class="dataseparador">
                        <strong>@grupo.Key.ToString("dd/MM/yyyy")</strong>
                        <hr class="dividedatas" />
                    </div>

                  
                    var criacaoTicketRegistro = grupo.FirstOrDefault(r => r.Tipo == "criacaoTicket");

                    
                    var outrosRegistros = grupo
                    .Where(r => r.Tipo != "criacaoTicket")
                    .OrderByDescending(r => r.Data);

                    @foreach (var registro in outrosRegistros)
                    {
                        if (registro.Tipo == "comentario" && registro.Comentario != null)
                        {
                            var comentario = registro.Comentario;

                            <div class="umcomentario">
                                @if (comentario.Utilizador != null)
                                {
                                    <div class="nomecomentario">@GerarUsername(comentario.Utilizador.Email) <span class="hora-comentario">@(comentario.Data.ToString("HH:mm"))</span></div>
                                    <div class="emailcomentario">@comentario.Utilizador.Email</div>
                                }
                                else
                                {
                                    <div class="nomecomentario">Convidado <span class="hora-comentario">@(comentario.Data.ToString("HH:mm"))</span></div>
                                    <div class="emailcomentario">convidado@exemplo.com</div>
                                }
                                <div class="textocomentario">@comentario.Conteudo</div>
                            </div>
                        }
                        else if (registro.Tipo == "evento" && registro.Evento != null)
                        {
                            var evento = registro.Evento;
                            var nomeCompleto = nomesUtilizadores.GetValueOrDefault(evento.UtilizadorId, "Utilizador desconhecido");
                            var username = FormatarNome(nomeCompleto);

                            <div class="criouticket">
                                <div class="point"> • </div>
                                <div class="username">@username</div>
                                <div class="textocriouticket">@evento.evento</div>
                                <div class="horariocriacaoticket">@evento.Data.ToString("HH:mm")</div>
                            </div>
                        }
                    }

                 
                    if (criacaoTicketRegistro != null)
                    {
                        <div class="criouticket">
                            <div class="point"> • </div>
                            <div class="username">@GerarUsername(ticketEncontrado.Email)</div>
                            <div class="textocriouticket">criou o ticket</div>
                            <div class="horariocriacaoticket">@ticketEncontrado.Data.ToString("HH:mm")</div>
                        </div>
                    }
                }
            }

            <div class="semmaisdados">Não existem mais dados</div>
        </div>

        <div class="comentario-form">
            <h4>Adicionar Comentário</h4>
            <EditForm Model="novoComentario" OnValidSubmit="AdicionarComentario">
                <textarea @bind="novoComentario.Conteudo" placeholder="Introduza o seu comentário..."></textarea>
                @if (nomeUtilizador != "convidado")
                {
                    <MudSwitch T="bool" @bind-Value="novoComentario.publico" Color="Color.Success" />
                }
                else
                {
                    <MudSwitch T="bool" Value="true" Disabled="false" Color="Color.Success" />
                }
                <button type="submit">Enviar comentário</button>
            </EditForm>
        </div>
    }

    @if (!string.IsNullOrEmpty(erro))
    {
        <div class="alert alert-danger" style="margin-left: 324px; margin-top: 20px;">@erro</div>
    }
</header>

@code {
    private string codigo;
    private Ticket ticketEncontrado;
    private string erro;
    private Comentario novoComentario = new Comentario();
    private List<Comentario> comentarios;
    private List<Evento> Eventos;
    private string nomeUtilizador;
    private string userEmail;
    private Dictionary<int, string> nomesUtilizadores = new Dictionary<int, string>();
    private List<RegistroAtividade> registrosAtividades = new List<RegistroAtividade>();

    // Classe que junta Comentário, Evento e Criação do Ticket
    public class RegistroAtividade
    {
        public DateTime Data { get; set; }
        public string Tipo { get; set; } // comentario, evento, criacaoTicket
        public Comentario Comentario { get; set; }
        public Evento Evento { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            nomeUtilizador = user.Identity.Name;
            userEmail = user.FindFirst(c => c.Type == "email")?.Value;
        }
        else
        {
            nomeUtilizador = "convidado";
            userEmail = "convidado@exemplo.com";
        }
    }

    private async Task ProcurarTicket()
    {
        erro = null;
        ticketEncontrado = null;
        comentarios = null;
        Eventos = null;
        registrosAtividades.Clear();

        try
        {
            ticketEncontrado = await TicketService.GetTicketByIdAsync(codigo);
            if (ticketEncontrado != null)
            {
                comentarios = await ComentarioService.GetComentariosByTicketIdAsync(ticketEncontrado.Id);
                Eventos = await EventoService.GetEventosByTicketIdAsync(ticketEncontrado.Id);
                await CarregarNomesUtilizadores();

                // Adiciona comentários
                if (comentarios != null)
                {
                    foreach (var comentario in comentarios)
                    {
                        registrosAtividades.Add(new RegistroAtividade
                            {
                                Data = comentario.Data,
                                Tipo = "comentario",
                                Comentario = comentario
                            });
                    }
                }

                // Adiciona eventos
                if (Eventos != null)
                {
                    foreach (var evento in Eventos)
                    {
                        registrosAtividades.Add(new RegistroAtividade
                            {
                                Data = evento.Data,
                                Tipo = "evento",
                                Evento = evento
                            });
                    }
                }

                // Adiciona a criação do ticket
                registrosAtividades.Add(new RegistroAtividade
                    {
                        Data = ticketEncontrado.Data,
                        Tipo = "criacaoTicket"
                    });

                // Ordena do mais recente para o mais antigo
                registrosAtividades = registrosAtividades.OrderByDescending(r => r.Data).ToList();
            }
            else
            {
                erro = "Ticket não encontrado.";
            }
        }
        catch (Exception ex)
        {
            erro = $"Erro ao procurar ticket: {ex.Message}";
        }
    }

    private async Task CarregarNomesUtilizadores()
    {
        if (Eventos != null)
        {
            foreach (var evento in Eventos)
            {
                if (!nomesUtilizadores.ContainsKey(evento.UtilizadorId))
                {
                    var nomeCompleto = await ObterNomeUtilizador(evento.UtilizadorId);
                    nomesUtilizadores[evento.UtilizadorId] = nomeCompleto;
                }
            }
        }
    }

    private async Task<string> ObterNomeUtilizador(int utilizadorId)
    {
        if (utilizadorId == 0)
        {
            return "Utilizador desconhecido";
        }

        try
        {
            var utilizador = await UtilizadorService.GetUtilizadorByIdAsync(utilizadorId);
            if (utilizador == null)
            {
                return "Utilizador desconhecido";
            }

            return $"{utilizador.PrimeiroNome} {utilizador.UltimoNome}";
        }
        catch
        {
            return "Utilizador desconhecido";
        }
    }

    private string GerarUsername(string email)
    {
        if (string.IsNullOrEmpty(email)) return "Utilizador desconhecido";

        var index = email.IndexOf('@');
        return index > 0 ? email.Substring(0, index) : email;
    }

    private string FormatarNome(string nome)
    {
        var palavrasRemover = new[] { "de", "da", "do", "dos", "das" };
        var normalizedString = nome.Normalize(NormalizationForm.FormD);
        var stringBuilder = new StringBuilder();

        foreach (var c in normalizedString)
        {
            if (CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)
            {
                stringBuilder.Append(c);
            }
        }

        var nomeArray = stringBuilder.ToString().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        var nomeFinalArray = nomeArray.Where(word => !palavrasRemover.Contains(word.ToLower())).ToArray();
        return "@" + string.Join("", nomeFinalArray).ToLower();
    }

    private async Task AdicionarComentario()
    {
        if (ticketEncontrado != null)
        {
            novoComentario.TicketId = ticketEncontrado.Id;
            novoComentario.Ticket = ticketEncontrado;

            novoComentario.Utilizador = new Utilizador
                {
                    Id = 0,
                    Email = "convidado@exemplo.com",
                    PrimeiroNome = "Convidado",
                    UltimoNome = "Convidado",
                    Password = "notused",
                    Role = "Guest"
                };

            novoComentario.publico = true;

            try
            {
                await ComentarioService.CreateComentarioAsync(novoComentario);

                // Atualiza a lista de comentários e registros
                if (comentarios == null)
                    comentarios = new List<Comentario>();

                comentarios.Add(novoComentario);

                registrosAtividades.Add(new RegistroAtividade
                    {
                        Data = novoComentario.Data,
                        Tipo = "comentario",
                        Comentario = novoComentario
                    });

                registrosAtividades = registrosAtividades.OrderByDescending(r => r.Data).ToList();

                novoComentario = new Comentario(); 
            }
            catch (Exception ex)
            {
                erro = $"Erro ao adicionar comentário: {ex.Message}";
            }
        }
    }
}
