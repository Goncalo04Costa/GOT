@using GOTinforcavado.Services
@using Shared.models
@inject UtilizadorService UtilizadorService

<style>
    .ddAtribuicao {
        width: 320px;
        border-radius: 8px;
        background: #ffff;
        opacity: 1;
        box-shadow: 0px 3px 6px #00000029;
    }

    .InputWrapper {
        width: 100%;
        height: 40px;
        margin: 0 auto;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .caixaDETexto {
        width: 100%;
        height: 40px;
        background: #FFFFFF;
        border: 1px solid #D1D8D8;
        border-radius: 8px;
        opacity: 1;
        padding: 16px 0 16px 16px;
    }
</style>

<div class="ddAtribuicao">
    <div class="InputWrapper">
        <input type="text" class="caixaDETexto" placeholder="Pesquise por..." @bind="searchQuery" @bind:event="oninput" />
        <span class="material-symbols-outlined" style="color: #19235699;">
            search
        </span>
    </div>
</div>

<ul>
    @foreach (var utilizador in filteredUtilizadores)
    {
        <li>@utilizador.PrimeiroNome - @utilizador.Email</li>
    }
</ul>

@code {
    private string searchQuery { get; set; } = string.Empty;
    private List<Utilizador> utilizadores = new();
    private List<Utilizador> filteredUtilizadores = new();

    protected override async Task OnInitializedAsync()
    {
        utilizadores = await UtilizadorService.GetUtilizadoresAsync();
        filteredUtilizadores = utilizadores;
    }

    private void OnSearchChanged()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredUtilizadores = utilizadores;
        }
        else
        {
            filteredUtilizadores = utilizadores
                .Where(u => u.PrimeiroNome.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            u.Email.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        OnSearchChanged();
    }
}
